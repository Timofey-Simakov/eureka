// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: images.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const imageByID = `-- name: ImageByID :one
SELECT id::text, page_id::text, name, mime, size_bytes, content FROM images WHERE id=$1::uuid
`

type ImageByIDRow struct {
	ID        string `json:"id"`
	PageID    string `json:"page_id"`
	Name      string `json:"name"`
	Mime      string `json:"mime"`
	SizeBytes int32  `json:"size_bytes"`
	Content   []byte `json:"content"`
}

func (q *Queries) ImageByID(ctx context.Context, dollar_1 uuid.UUID) (ImageByIDRow, error) {
	row := q.db.QueryRowContext(ctx, imageByID, dollar_1)
	var i ImageByIDRow
	err := row.Scan(
		&i.ID,
		&i.PageID,
		&i.Name,
		&i.Mime,
		&i.SizeBytes,
		&i.Content,
	)
	return i, err
}

const imageCreate = `-- name: ImageCreate :one
INSERT INTO images (page_id,name,mime,size_bytes,content)
VALUES ($1::uuid,$2,$3,$4,$5)
RETURNING id::text
`

type ImageCreateParams struct {
	Column1   uuid.UUID `json:"column_1"`
	Name      string    `json:"name"`
	Mime      string    `json:"mime"`
	SizeBytes int32     `json:"size_bytes"`
	Content   []byte    `json:"content"`
}

func (q *Queries) ImageCreate(ctx context.Context, arg ImageCreateParams) (string, error) {
	row := q.db.QueryRowContext(ctx, imageCreate,
		arg.Column1,
		arg.Name,
		arg.Mime,
		arg.SizeBytes,
		arg.Content,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
